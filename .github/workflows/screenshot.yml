name: PR Screenshot Commenter

on:
  pull_request:

jobs:
  screenshot:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - run: npm i -g @antfu/ni

      - name: Install dependencies
        run: nci

      - name: build app
        run: nr build

      - name: Remove old screenshots
        run: rm -rf playwright/previews/*.png

      - name: Install Playwright Browsers
        run: nr playwright install --with-deps
      - name: Run Playwright tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- nr test:playwright

      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: playwright/previews/*.png

      - name: Publish screenshots to branch and list files
        id: publish_and_list_screenshots
        env:
          BRANCH_NAME: pr-screenshot-${{ github.event.pull_request.number }}-${{ github.run_id }}
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SCREENSHOT_DIR="playwright/previews"
          UPLOAD_DIR="upload_screenshots"

          mkdir -p "$UPLOAD_DIR"

          shopt -s nullglob
          files_to_copy=("$SCREENSHOT_DIR"/*.png)
          shopt -u nullglob

          if [ ${#files_to_copy[@]} -eq 0 ]; then
            echo "No PNG screenshots found in $SCREENSHOT_DIR"
            echo "screenshots_found=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          cp "$SCREENSHOT_DIR"/*.png "$UPLOAD_DIR/"
          echo "screenshots_found=true" >> $GITHUB_OUTPUT

          echo "Found screenshots to publish:"
          ls "$UPLOAD_DIR"/*.png

          cd "$UPLOAD_DIR"

          filenames_for_output=$(ls *.png)
          {
            echo "filenames_list<<HEREDOC_DELIMITER_RANDOM_STRING"
            echo "$filenames_for_output"
            echo "HEREDOC_DELIMITER_RANDOM_STRING"
          } >> "$GITHUB_OUTPUT"

          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add *.png
          git commit -m "Add screenshots for PR #${{ github.event.pull_request.number }}"
          git branch -M "$BRANCH_NAME"
          git remote add origin "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git"
          git push origin "$BRANCH_NAME" --force

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Prepare comment message
        id: prepare_comment_message
        if: steps.publish_and_list_screenshots.outputs.screenshots_found == 'true'
        env:
          BRANCH: ${{ steps.publish_and_list_screenshots.outputs.branch_name }}
          REPO: ${{ github.repository }}
          FILENAMES_LIST: ${{ steps.publish_and_list_screenshots.outputs.filenames_list }}
        run: |
          MESSAGE="Screenshots for this PR:\n\n"
          echo "Using branch: $BRANCH for repository: $REPO"
          echo "Files to process from FILENAMES_LIST:"
          echo "$FILENAMES_LIST"

          OLD_IFS="$IFS"
          NEWLINE_CHAR=$(printf '\n')
          IFS="$NEWLINE_CHAR"

          for filename in $FILENAMES_LIST; do
            if [ -n "$filename" ]; then
              encoded_filename=$(echo "$filename" | sed 's/ /%20/g' | sed 's/#/%23/g' | sed 's/?/%3F/g')
              MESSAGE="${MESSAGE}**${filename}**\n"
              MESSAGE="${MESSAGE}![](https://raw.githubusercontent.com/${REPO}/${BRANCH}/${encoded_filename})\n\n"
            fi
          done
          IFS="$OLD_IFS"

          echo "Final message body to be set in output:"
          echo -e "$MESSAGE"

          {
            echo "markdown_message<<HEREDOC_DELIMITER_RANDOM_STRING"
            echo -e "$MESSAGE"
            echo "HEREDOC_DELIMITER_RANDOM_STRING"
          } >> "$GITHUB_OUTPUT"

      - name: Comment with screenshots
        if: steps.publish_and_list_screenshots.outputs.screenshots_found == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: ${{ steps.prepare_comment_message.outputs.markdown_message }}
          pr_number: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
