---
description:
globs:
alwaysApply: false
---
# Error Handling Rules

## 📚 Reference Documentation

**必ず [docs/error-handling.md](mdc:docs/error-handling.md) を参照してください。** 詳細なエラーハンドリング戦略、実装例、ベストプラクティスが記載されています。

## 🎯 Core Principles

1. **ユーザー体験を最優先** - ユーザーには分かりやすいメッセージを表示
2. **開発者には詳細情報** - Sentryに完全なエラー情報を送信
3. **予期可能エラーと予期しないエラーを区別** - UserFacingErrorを適切に使用

## 🛠️ Implementation Guidelines

### tRPCプロシージャでのエラーハンドリング

#### neverthrow Resultの変換
```typescript
// ✅ Good: Helper関数を使用
import { handleResultError, fileOperationErrorMappings } from '../lib/errorHelpers';

procedure.mutation(async (ctx) => {
  const result = await service.someOperation(ctx.input);
  handleResultError(result, fileOperationErrorMappings);
  return true;
});

// ✅ Good: サイレント処理が必要な場合
import { handleResultErrorWithSilent } from '../lib/errorHelpers';

procedure.mutation(async () => {
  const result = await service.showDialog();
  const dialogResult = handleResultErrorWithSilent(result, ['canceled'], fileOperationErrorMappings);
  if (dialogResult !== null) {
    // 成功時の処理
  }
  return true;
});
```

#### 直接的なエラー投げ
```typescript
// ✅ Good: ユーザー向けメッセージ
import { UserFacingError, OperationFailedError } from '../lib/errors';

if (invalidInput) {
  throw new UserFacingError('入力が無効です。正しい形式で入力してください。');
}

if (operationFailed) {
  throw new OperationFailedError('データ保存', '容量不足のため保存できませんでした。');
}

// ✅ Good: 予期しないエラー（そのまま投げる）
throw new Error('Unexpected API response format');
```

### サービス層でのneverthrowの使用

```typescript
// ✅ Good: 詳細なエラー型を定義
export const getFileData = async (filePath: string): Promise<Result<string, 'ENOENT' | 'PERMISSION_DENIED'>> => {
  try {
    const data = await fs.readFile(filePath);
    return ok(data.toString());
  } catch (error) {
    if (error.code === 'ENOENT') {
      return err('ENOENT' as const);
    }
    if (error.code === 'EACCES') {
      return err('PERMISSION_DENIED' as const);
    }
    // 予期しないエラーはthrow
    throw error;
  }
};
```

## 🚫 Avoid These Patterns

```typescript
// ❌ Bad: 汎用的なErrorをneverthrowで返す
return neverthrow.err(new Error('Something went wrong'));

// ❌ Bad: tRPCプロシージャでif (result.isErr()) throw result.error
if (result.isErr()) {
  throw result.error; // Helper関数を使うべき
}

// ❌ Bad: ユーザーに技術的詳細を表示
throw new UserFacingError(`Database error: ${error.stack}`);

// ❌ Bad: すべてのエラーをUserFacingErrorにする
throw new UserFacingError('Network timeout occurred');
```

## 📦 Available Helper Functions

Reference [electron/lib/errorHelpers.ts](mdc:electron/lib/errorHelpers.ts) for:

- `handleResultError()` - Result → UserFacingError変換
- `handleResultErrorWithSilent()` - サイレント処理対応版
- `fileOperationErrorMappings` - ファイル操作用マッピング
- `photoOperationErrorMappings` - 写真操作用マッピング
- `vrchatLogErrorMappings` - VRChatログ用マッピング
- `databaseErrorMappings` - データベース操作用マッピング

## 🎯 Error Classes

Reference [electron/lib/errors.ts](mdc:electron/lib/errors.ts) for:

- `UserFacingError` - ユーザー向けメッセージ用ベースクラス
- `OperationFailedError` - 具体的な操作失敗用クラス

## 📋 Quick Decision Guide

1. **tRPCプロシージャ内** → Helper関数またはUserFacingErrorを使用
2. **サービス層** → neverthrowのResultパターンを継続使用
3. **ユーザーに見せたいメッセージがある** → UserFacingError
4. **予期しないエラー** → 通常のErrorをそのまま投げる
5. **キャンセル等の正常なケース** → handleResultErrorWithSilentでサイレント処理
